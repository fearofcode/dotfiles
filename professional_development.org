#+TITLE: So good they can't ignore you/Git gud or get rekt
#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)

* DONE Command line workflow [1/1]
  :LOGBOOK:  
  - State "DONE"       from ""           [2016-11-27 Sun 15:53]
  :END:      
** DONE Basic mechanics of working with org-mode [3/3]
   :LOGBOOK:  
   - State "DONE"       from "TODO"       [2016-11-27 Sun 15:53]
   :END:      
*** DONE Getting started video: [[https://www.youtube.com/watch?v=bzZ09dAbLEE][Taking Notes in Emacs Org-mode]]
    :LOGBOOK:  
    - State "DONE"       from "DONE"       [2016-11-27 Sun 13:50]
    :END:      
*** DONE Rainer Konig's videos: [[https://www.youtube.com/user/koenighaunstetten/videos]] 
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2016-11-27 Sun 14:12]
    :END:      
    - Note taken on [2016-11-27 Sun 13:42] \\
      Watched a goodly amount, but ultimately only a subset.

*** DONE port full professional development spreadsheet over to this file 
    :LOGBOOK:  
    - State "DONE"       from "WAIT"       [2016-11-27 Sun 15:52]
    :END:      
   

* Learning C [3/10]
** DONE C Primer Plus [4/4]
   :LOGBOOK:  
   - State "DONE"       from "TODO"       [2016-12-17 Sat 12:23]
   :END:      
*** DONE Learn how Emacs' cc-mode works (Makefiles, etc)
    :LOGBOOK:  
    - State "DONE"       from "WAIT"       [2016-11-27 Sun 22:24]
    - State "WAIT"       from "TODO"       [2016-11-27 Sun 22:23] \\
      Got basics working, enough to run make.
    :END:      
*** DONE Figure out basic debugging with lldb
    :LOGBOOK:  
    - State "DONE"       from ""           [2016-11-27 Sun 22:26]
    :END:      
*** DONE Get =scan-build= working on OS X
    :LOGBOOK:  
    - State "DONE"       from ""           [2016-11-27 Sun 22:26]
    :END:      
*** DONE Read rest of book
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2016-12-17 Sat 12:23]
    :END:      
** DONE Practical C Programming (probably only floating point chapter)
   :LOGBOOK:  
   - State "DONE"       from "TODO"       [2016-12-17 Sat 22:13]
   :END:      
** DONE Intermediate C Programming
   :LOGBOOK:  
   - State "DONE"       from "TODO"       [2016-12-29 Thu 21:12]
   :END:      
** TODO Understanding and Using C Pointers
** WAIT C Interfaces and Implementations
** WAIT Expert C Programming
** TODO 21st Century C Programming
** TODO Write simple versions of elementary data structures (linked list, queue, binary search tree) from scratch
** WAIT Autotools book
** TODO Understand and comprehend Linus Torvalds' double pointer comment :project:
*** http://grisha.org/blog/2013/04/02/linus-on-understanding-pointers/ / https://www.youtube.com/watch?v=GiAhUYCUDVc

* Project: feedback control for queue systems
** Feedback and Control for Everyone
** [[http://m.eet.com/media/1112634/f-wescot.pdf][PID Without a PhD]]
** Core Java
** Effective Java / Java Concurrency In Practice (skim them, see if good)
** Kafka: The Definitive Guide
** Sedgewick's /Algorithms/ up through priority queues + discrete event simulation section
** Discrete event simulation + PSO (do literature search)
** Fine tune against live system with coordinate descent
* Preparatory math (including prep for 6.006)
** AOPS math books up through calculus
** Foundations of Combinatorics with Applications
** Graph Theory with Applications
** Organize bookshelf by subject
** Linear algebra
** Differential equations
** Multivariable Calculus, Clark Bray / Advanced Calculus: A Geometric View
** Abstract algebra
*** A Book of Abstract Algebra
*** Abstract Algebra: An Inquiry-Based approach
** An Introduction to Number Theory With Cryptography / Introduction to Cryptography with Maple
*** Preparation for optimization book that uses Maple
** Concrete Mathematics
** Real analysis
*** Understanding Analysis
*** Foundations of Mathematical Analysis (has Fourier series chapter)
*** TODO go through other books
** Complex analysis
** [[https://www.math.upenn.edu/~wilf/gfology2.pdf][generatingfunctionology (PDF)]]
* Algorithms and data structures (write code in C/Python) [2/9]
** DONE Look through data structures/algorithms books and decide which ones to read from
   :LOGBOOK:  
   - State "DONE"       from "TODO"       [2016-12-12 Mon 22:22]
   :END:      
** CANCELED Algorithms Unlocked
   :LOGBOOK:  
   - State "CANCELED"   from "TODO"       [2016-11-29 Tue 21:25] \\
     I have enough other material that it shouldn't be necessary. I already have some prior context on algorithms and data structures
   :END:      
** TODO Weiss's Algorithms and Data Structures in C
** [[https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/index.htm][6.006: Introduction to Algorithms]]
** TODO Sedgewick's Algorithms in C
** TODO Sedgewick's /Algorithms/
** TODO Skiena's /Algorithm Design Manual/
** TODO /Programming Pearls/
** [[https://interactivepython.org/runestone/static/pythonds/index.html][Problem Solving with Algorithms and Data Structures Using Python]]
** TODO CLRS

** [[http://ticki.github.io/blog/skip-lists-done-right/][Skip Lists Done Right]]
** TODO Write basic versions of the most common data structures (linked list, queue, BST, red-black tree, priority queue, max heap, etc) from scratch in C
** Do it in Python, too!
* Assembly language, UNIX systems programming, machine organization, concurrency [4/18]
** TODO Inside the Machine 
** TODO How Linux works
** CANCELED [[http://savannah.spinellicreations.com//pgubook/ProgrammingGroundUp-1-0-lettersize.pdf][Programming From The Ground Up]] [[http://www.cs.princeton.edu/courses/archive/spring04/cos217/][Old Princeton course page that used the book]]
** TODO Assembly Language Step-by-Step: Programming with Linux
** TODO Introduction to 64 Bit Assembly Programming for Linux and OS X
** TODO Modern Assembly Language Programming with the ARM Processor (+ buy Raspberry Pi)
** TODO Read through and write up LaTeX summary of https://en.wikipedia.org/wiki/Two's_complement
** TODO Raspberry Pi Assembly Language RASPBIAN Beginners: Hands On Guide 
** WAIT The Linux Programming Interface: A Linux and UNIX System Programming Handbook 
   :LOGBOOK:  
   - State "WAIT"       from "TODO"       [2016-12-11 Sun 22:53] \\
     Too big, reference manual more than tutorial
   :END:      
** Linux System Programming
** CANCELED Shared Memory Application Programming: Concepts and Strategies in Multicore Application Programming
   :LOGBOOK:  
   - State "CANCELED"   from "TODO"       [2016-11-29 Tue 08:59] \\
     Seems redundant with other concurrency books, may try later
   :END:      
** TODO The Art of Multiprocessor Programming 
** [[http://cs.brown.edu/courses/cs176/lectures.shtml][Class lectures for course that uses Art of Multiprocessor Programming]]
** WAIT Programming with POSIX Threads
** WAIT The Art of Concurrency: A Thread Monkey's Guide to Writing Parallel Applications 
** TODO Computer Systems: A Programmer's Perspective
** CANCELED Discovering Modern C++ -> C++ Concurrency In Action: Practical Multithreading
   :LOGBOOK:  
   - State "CANCELED"   from "TODO"       [2016-11-29 Tue 09:00] \\
     Too much to do
   :END:      
** CANCELED Read-only Twitter client in C++			    :project:
   :LOGBOOK:  
   - State "CANCELED"   from "TODO"       [2016-11-29 Tue 09:00]
   :END:      
** [[https://en.wikipedia.org/wiki/Read-copy-update][Read-copy update]]
** TODO [[https://brennan.io/2015/01/16/write-a-shell-in-c/][Write a Shell in C]]
** TODO Project: read and understand http://timetobleed.com/the-broken-promises-of-mrireeyarv/ if it doesn't require compiler/interpreter knowledge :project:
** [[https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf][IA64 Software Developer's Manuals (PDF)]]
* Operating systems [0/16]
** MINIX book
*** Courses using it: http://wiki.minix3.org/doku.php?id=courses
*** UCSB course using it: http://www.cs.ucsb.edu/~ravenben/classes/170/index.html 
*** Additional project doing thread-local storage http://www.cs.ucsb.edu/~chris/teaching/cs170/projects/proj4.html
** TODO Anderson
*** [[http://web.stanford.edu/~ouster/cgi-bin/cs140-winter16/index.php][CS140 @ Stanford]]
** TODO OSTEP http://pages.cs.wisc.edu/~remzi/OSTEP/
*** Maybe Anderon's OSPP, Tanenbaum, etc. if OSTEP doesn't work out 
** Linux Kernel Development
** Try Xinu book
** [[http://www.kroah.com/log/linux/howto.html][HOWTO do Linux kernel development]]
** TODO Project: how fast are append-only reads/writes? How fast is parallel file I/O? :project:
** TODO (Maybe) [[https://www.gitbook.com/book/0xax/linux-insides/details][Linux Insides]] [[http://www.ibm.com/developerworks/library/l-linuxboot/index.html][Inside the Linux boot process (2006)]]
** [[https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/][Dive Into BPF]]
** [[https://lwn.net/Articles/250967/][What every programmer should know about memory, part 1]]
** [[http://feederio.com/book/37/the-little-book-about-os-development][The Little Book About OS Development]]
** TODO Watch and possibly comment (in a blog post, in a reasonable, intelligent way) to https://www.youtube.com/watch?v=L9v4Mg8wi4U
** TODO Investigate Linux's caching of files			    :project:
*** https://hoytech.com/vmtouch/
*** https://www.thomas-krenn.com/en/wiki/Linux_Page_Cache_Basics
*** http://www.linuxatemyram.com/play.html
*** http://queue.acm.org/detail.cfm?id=1814327
*** https://varnish-cache.org/docs/trunk/phk/notes.html
*** http://oldblog.antirez.com/post/what-is-wrong-with-2006-programming.html
*** Did Varnish abandon the approach Kamp talked about? https://info.varnish-software.com/blog/introducing-varnish-massive-storage-engine
** TODO Possible project: tools to detect thread problems in code, e.g https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual :project:
** TODO Possible (fun) project: kernel module that blinks keyboard LEDs http://www.tldp.org/LDP/lkmpg/2.6/html/x1194.html :project:
** TODO Possible project; try to do something like Tim Bray's Wide Finder; maybe try to convince him to fork over the data set for modern analysis? :project:
** TODO Possible project: OS 161 http://os161.eecs.harvard.edu/ or other OS projects :project:
** TODO Possible project: Arch Linux -> Linux from scratch	    :project:
** TODO Possible project: Windows internals -> game botting	    :project:
** TODO Possible project: read through and understand Joe Damato's blog posts :project:
** TODO Possible project: Brendan Gregg's tracing tools http://www.brendangregg.com/blog/2016-10-27/dtrace-for-linux-2016.html :project:
** TODO Possible project: Joe Damato's computer project list https://docs.google.com/document/d/1V0CnufAf-85Jn1W2c_Qvfzbm2ss9WY4yJ41jQWwA-5Q/edit :project:
** TODO Possible project: MIT's OS course https://pdos.csail.mit.edu/6.828/2016/overview.html :project:
** TODO Possible project: read through http://carlos.bueno.org/optimization/mature-optimization.pdf :project:
** [[https://en.wikipedia.org/wiki/Tanenbaum%25E2%2580%2593Torvalds_debate][Tanenbaum-Torvalds debate]]
* Engineering math (deep)
** Fourier analysis
** Probability, statistics, queueing theory
** Hilbert spaces
* Learning path: 2.14/2.151 Advanced Control
** 8.01: Physics I
*** University Physics with Modern Physics is expensive as fuck, so buying old 11th edition to go along with MIT course page
*** Supplement with Morin's Problems and Solutions in Introductory Mechanics
** 8.02: Physics II, Electricity and Magnetism
*** https://ocw.mit.edu/courses/physics/8-02x-physics-ii-electricity-magnetism-with-an-experimental-focus-spring-2005/index.htm
*** ^ That uses Young and Freedman, so makes sense and avoids having to read Shankar
** 2.087: Engineering Math
*** https://ocw.mit.edu/courses/mechanical-engineering/2-087-engineering-math-differential-equations-and-linear-algebra-fall-2014/index.htm
*** Already have Strang's DiffEq's + LinAlg book
** 6.01: Intro EECS 1
*** Just go with material at https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-01sc-introduction-to-electrical-engineering-and-computer-science-i-spring-2011/index.htm
** 6.02: Intro EECS 2
*** Go with material at https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-02-introduction-to-eecs-ii-digital-communication-systems-fall-2012/index.htm
** 6.003: Signals and Systems
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-003-signals-and-systems-fall-2011/index.htm
*** Already own Oppenheim and Willsky. Score!
** 6.011: Comm, Control and Signal Processing
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-011-introduction-to-communication-control-and-signal-processing-spring-2010/index.htm    
** Practical electronics books
** Maybe advanced math books to deeply understand transforms
** Other EE/computer architecture stuff: 6.004? Electromagnetism/Lathi?
** 2.003: Dynamics and Control
*** https://ocw.mit.edu/courses/mechanical-engineering/2-003j-dynamics-and-control-i-spring-2007/
** 2.004: Dynamics and Control II
*** https://ocw.mit.edu/courses/mechanical-engineering/2-004-dynamics-and-control-ii-spring-2008/index.htm
** 2.04A: Systems And Controls
*** https://ocw.mit.edu/courses/mechanical-engineering/2-04a-systems-and-controls-spring-2013/index.htm
** 2.14 Analysis and Design of Feedback Control Systems
*** https://ocw.mit.edu/courses/mechanical-engineering/2-14-analysis-and-design-of-feedback-control-systems-spring-2014/index.htm
** 2.151: No materials, the assholes
*** Just read through Brogan
** 2.171 Analysis and Design of Digital Control Systems
*** https://ocw.mit.edu/courses/mechanical-engineering/2-171-analysis-and-design-of-digital-control-systems-fall-2006/index.htm
** 6.241: Dynamic Systems And control
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-241j-dynamic-systems-and-control-spring-2011/index.htm
** 6.243 Nonlinear Systems (maybe? don't buy anything)
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-243j-dynamics-of-nonlinear-systems-fall-2003/index.htm
** 6.245: Multivariable Control Systems
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-245-multivariable-control-systems-spring-2004/index.htm

** 6.432: Stochastic Processes, Detection, and Estimation
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-432-stochastic-processes-detection-and-estimation-spring-2004/syllabus/
*** IDK what books to get, just read through Kay
** 6.435: System Identification
*** Just read through Kay, the recommended book looks bad
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-435-system-identification-spring-2005/index.htm
** CSE 590K: Analysis and Control of Computer Systems Using Linear Discrete-Time System Theory
*** http://research.microsoft.com/en-us/um/people/liuj/cse590k2008winter/ 
** Followup material
*** The Art of Control Engineering
*** Feedback and Control for Everyone
*** Computer-Controlled Systems
*** Feedback Control for Computer Systems
*** Nonlinear control by Khalil
*** Probability and Queuing theory books
*** Machine learning books
* Physics/math -> EE -> computer architecture/control theory/engineer all the things
** Going off of http://www.eecs.mit.edu/sites/default/files/6-1.pdf in breadth-first order, bottom-up; look up MIT materials for each subsequent course
** 6.041: Introduction to Probability, 2nd Edition
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-041-probabilistic-systems-analysis-and-applied-probability-fall-2010/index.htm
** 18.03: Diffeq's
*** https://ocw.mit.edu/courses/mathematics/18-03-differential-equations-spring-2010/index.htm
*** Assigned book looks terrible, use different one instead
*** Barbu and cheap Dover one by Tenenbaum
** 8.01: Physics I
*** University Physics with Modern Physics is expensive as fuck, so buying old 11th edition to go along with MIT course page
*** Supplement with Morin's Problems and Solutions in Introductory Mechanics
** 8.02: Physics II, Electricity and Magnetism
*** https://ocw.mit.edu/courses/physics/8-02x-physics-ii-electricity-magnetism-with-an-experimental-focus-spring-2005/index.htm
*** ^ That uses Young and Freedman, so makes sense and avoids having to read Shankar
** 8.03: Physics III
*** https://ocw.mit.edu/courses/physics/8-03-physics-iii-spring-2003/index.htm
*** The two vibration/waves books
** 8.04: Quantum Physics I
*** https://ocw.mit.edu/courses/physics/8-04-quantum-physics-i-spring-2013/index.htm
** 6.01: Intro EECS 1
*** Just go with material at https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-01sc-introduction-to-electrical-engineering-and-computer-science-i-spring-2011/index.htm
** 6.002: Circuits (assumed by Spring 2006 6.004 OCW, so do it)
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-002-circuits-and-electronics-spring-2007/
*** Foundations of Analog and Digital Electronic Circuits
** 6.02: Intro EECS 2 (maybe)
*** Go with material at https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-02-introduction-to-eecs-ii-digital-communication-systems-fall-2012/index.htm
*** Supplement with Lathi
** 6.003: Signals and Systems
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-003-signals-and-systems-fall-2011/index.htm
*** Already own Oppenheim and Willsky. Score!
** 6.011: Comm, Control and Signal Processing
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-011-introduction-to-communication-control-and-signal-processing-spring-2010/index.htm    
** Later: control classes like 6.302/2.003; round up all control books and read them
*** https://ocw.mit.edu/courses/find-by-topic/#cat=engineering&subcat=mechanicalengineering&spec=dynamicsandcontrol
** [[http://citeseerx.ist.psu.edu/viewdoc/download?doi%3D10.1.1.187.7309&rep%3Drep1&type%3Dpdf][Dynamically Scaling Applications In The Cloud]]
** 6.823: Computer System Architecture
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-823-computer-system-architecture-fall-2005/index.htm
*** Already own Hennessy and Patterson
** [[https://www.edx.org/course/introduction-control-system-design-first-mitx-6-302-0x#!][Introduction To Control System Design]] - build a self-levitating helicopter arm thing! Dope!
** 6.004: Computation Structures (Computer Architecture)
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-004-computation-structures-spring-2009/index.htm
*** Supplement with Digital Design and Computer Architecture: ARM Edition
** [[http://fourierandwavelets.org/FSP_v1.1_2014.pdf][Foundations of Signal Processing (PDF)]] 
** [[http://iiis.tsinghua.edu.cn/~weixu/files/master_thesis.pdf][Feedback Control Theory and Processing System Log Streams]]
** 6.007: Applied EM (maybe)
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-007-electromagnetic-energy-from-motors-to-lasers-spring-2011/index.htm
** 6.012: Microelectronic Circuits
*** https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-012-microelectronic-devices-and-circuits-fall-2009/index.htm
*** Free downloadable ebook! (maybe)
* Networks [0/11]
** TODO Computer Networks, Fifth Edition: A Systems Approach
** TODO The Illustrated Network: How TCP/IP Works In A Modern Network
** Upgrading and Repairing PCs
** Networking All-in-One For Dummies (yeah, yeah)
** Cisco Networking All-in-One for Dummies (fuck off)
** Networking: A Beginner's Guide
** TODO Interconnections: Bridges, Routers, Switches, and Internetworking Protocols 
** TODO High Performance Browser Networking (already purchased)
** TODO [[https://www.amazon.com/Every-Developer-Should-OdeToCode-Programming-ebook/dp/B0076Z6VMI/ref%3Dsr_1_1?s%3Dbooks&ie%3DUTF8&qid%3D1480202887&sr%3D1-1&keywords%3Dhttp][What Every Developer Should Know About HTTP]]
** TODO Tangled Web: A Guide to Securing Modern Web Applications
** TODO [[http://dtrace.org/blogs/dap/2016/08/18/tcp-puzzlers/][TCP Puzzlers]]
** [[https://www.amazon.com/Effective-TCP-IP-Programming-Programs/dp/0201615894/][Effective TCP/IP Programming: 44 Tips to Improve Your Network Programs]]
** TODO Project: fast static blogging with Hugo/Jekyll and a CDN; also try Varnish and compare https://lustforge.com/2016/02/27/hosting-hugo-on-aws/ http://book.varnish-software.com/4.0/chapters/Design_Principles.html :project:
** TODO Possible project: wifi password cracking/auditing	    :project:
** TODO Possible project: DDoS mitigation			    :project:
** TODO Possible project: OpenBSD + i3 https://www.amazon.com/Absolute-OpenBSD-Unix-Practical-Paranoid/dp/1593274769 :project:
* Compilers and programming languages [0/9]
** TODO Programming Language Pragmatics
** TODO Engineering a Compiler
** TODO The Garbage Collection Handbook
** TODO The Definitive ANTLR 4 Reference
** TODO [[https://interpreterbook.com/][Writing an Interpreter in Go]]
** TODO [[http://www.aosabook.org/en/posa/parsing-xml-at-the-speed-of-light.html][Parsing XML At The Speed Of Light]]
** [[http://schemeworkshop.org/2006/11-ghuloum.pdf][An Incremental Approach to Compiler Construction]]
** TODO Possible project: Look at [[http://clang.llvm.org/OpenProjects.html][Clang Project List]] and see if any are doable/interesting.
*** Possibly buy a book on LLVM and read to prepare
** TODO Possible project: learn Go and ressurrect https://github.com/trustpath/sequence
** TODO Possible project: read DJB's slides on optimization and comment https://cr.yp.to/talks/2015.04.16/slides-djb-20150416-a4.pdf
* Databases/transaction processing [0/1]
** TODO sort through databases books and prioritize them here

* Distributed systems [0/2]
** TODO Prioritize books and enter them here
** TODO [[http://christophermeiklejohn.com/distributed/systems/2013/07/12/readings-in-distributed-systems.html][CS Meiklejohn's readings in distributed systems]]
** [[https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-yuan.pdf][Simple Testing Can Prevent Most Critical Failures]]
** [[https://codahale.com/you-cant-sacrifice-partition-tolerance/][You Can't Sacrifice Partition Tolerance]]
** Project: learn Clojure and reproduce some of Kyle Kingsbury's Jepsen posts, try them out on other databases/systems (Kafka/RabbitMQ/Redis maybe) :project:

** Project: investigate linear I/O in Kafka https://engineering.linkedin.com/kafka/benchmarking-apache-kafka-2-million-writes-second-three-cheap-machines
* Capstone projects 
** Implement Mitzenmacher's Power of Two Choices Algorithm in HAProxy or nginx
*** [[http://www.eecs.harvard.edu/~michaelm/postscripts/mythesis.pdf][The Power of TWo Choices in Randomized Load Balancing]]
*** [[https://www.youtube.com/watch?v%3Dgas2v1emubU][Load Balancing is Impossible]] : counter-intuitive results about bad performance of random load balancing
*** http://nginx.org/en/docs/http/load_balancing.html
*** https://blog.buoyant.io/2016/03/16/beyond-round-robin-load-balancing-for-latency/
** Do something with RocksDB/LevelDB? Maybe creating indexes? Explore internals?
** Windows Internals + [[https://www.nostarch.com/gamehacking][Game Hacking]]
** [[https://www.nostarch.com/bughunter][Bug Hunter's Diary]]
** Capstone: spend more time with C and master it https://www.quora.com/How-can-one-uncover-the-secrets-of-C
** Possible project: how to actually do analytics/use/build OLAP cubes :project:
** Project: trace through session handling and see how secret keys are used to identify users :project:
** Possible project: pessimistic concurrency in a toy gift card web app http://sakurity.com/blog/2015/05/21/starbucks.html compare how to do it in MySQL, PostgreSQL; advisory locks vs. row-level locks :project:
*** Possible sample application: concert ticket sales app where you can resell tickets to other users
*** Doesn't actually require payment processing to play with, but could be interesting
*** [[https://pragprog.com/book/nrwebpay/take-my-money][Take My Money]]
** Project: Django cache invalidation through Postgres logical decoding :project:
** Project: streaming RSS/Twitter client based off Kafka w/ auto scaling or something :project:
** Project: CRDTs + collaborative editing in real-time web apps	    :project:
** Project: parallel Hearthstone search				    :project:
** Project: Oracle ETL [[https://www.amazon.com/Automated-ETL-Testing-Richard-Thrust-ebook/dp/B00MLNJRU8/ref%3Dla_B00IO0EZ0Y_1_1?s%3Dbooks&ie%3DUTF8&qid%3D1480290343&sr%3D1-1][Automated ETL Testing]] [[https://www.amazon.com/Data-Warehouse-Workshop-Providing-Experience/dp/1494926962/ref%3Dsr_1_fkmr0_2?ie%3DUTF8&qid%3D1480290442&sr%3D8-2-fkmr0&keywords%3Doracle%2Betl][The Data Warehouse Workshop: Providing Practical Experience to the Aspiring ETL Developer]] :project:
* Software engineering/soft skills [0/3]
** [[https://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330][Practical Object-Oriented Design in Ruby]]
** Peopleware
** Lots of software architecture books on Amazon. Prioritize them here
** TODO Clean Code
** TODO Refactoring
** TODO Code Complete
** Watch and possibly respond to people critiquing OOP		    :project:
*** https://www.youtube.com/watch?v=V6VP-2aIcSc
*** https://www.youtube.com/watch?v=IRTfhkiAqPw
*** https://www.youtube.com/watch?v=QM1iUe6IofM
* Return to math/machine learning
** [[https://medium.com/@karpathy/yes-you-should-understand-backprop-e2f06eab496b#.qbhtijm72][Yes, you should understand backprop]]
* Game hacking

* Infosec
** Buy interesting infosec/crypto books, prioritize them and already purchased books here
** [[http://insecure.org/stf/smashstack.html][Smashing The Stack For Fun And Profit]]
** [[https://github.com/kurobeats/pentest-bookmarks/blob/master/BookmarksList.md][Pentesting bookmarks]]
** Free PDF: [[https://www.cl.cam.ac.uk/~rja14/book.html][Security Engineering]]
** [[https://github.com/jacobian/infosec-engineering][Infosec reading list]]
** [[http://www.rand.org/content/dam/rand/pubs/monographs/2004/RAND_MG126.pdf][Out of the Ordinary: Finding Threats by Analyzing Unusual Behavior]]

** [[http://openwall.info/wiki/_media/people/jvanegue/files/woot12.pdf][SMT Solvers for Software Security]]
* CSS and JavaScript suck ass, but fight the ocean and you will drown
** WAIT [[https://www.amazon.com/Front-End-Web-Development-Ranch-Guide/dp/0134433947][Front-end Web Development: The Big Nerd Ranch Guide]]
   :LOGBOOK:  
   - State "WAIT"       from ""           [2016-12-03 Sat 19:23] \\
     Review at https://www.amazon.com/review/RL60VE4K11RM3/ref=cm_cr_dp_cmt?ie=UTF8&ASIN=0134433947&channel=detail-glance&nodeID=283155&store=books#wasThisHelpful
     makes it seem lousy
   :END:      
** [[https://www.amazon.com/Learning-JavaScript-Essentials-Application-Development/dp/1491914912][Learning JavaScript]]
** [[http://eloquentjavascript.net/][Eloquent JavaScript]]
** You Don't Know JS series
** WAIT [[https://leanpub.com/exploring-es6][Exploring ES6]]
   :LOGBOOK:  
   - State "WAIT"       from ""           [2016-12-03 Sat 19:38] \\
     Seems redundant with other ES6 book
   :END:      
** [[https://www.amazon.com/Understanding-ECMAScript-Definitive-JavaScript-Developers/dp/1593277571/][Understanding ECMAScript 6]]
** [[https://www.packtpub.com/web-development/react-design-patterns-and-best-practices][React Design Patterns and Best Practices]]
** [[https://www.amazon.com/CSS-Master-Organized-Efficient-Right/dp/0994182627][CSS Master]]
** [[https://www.amazon.com/CSS-Mastery-Andy-Budd/dp/1430258632][CSS Mastery]]
** [[https://www.amazon.com/CSS-Secrets-Solutions-Everyday-Problems/dp/1449372635][CSS Secrets]]
** [[https://www.packtpub.com/web-development/learning-bootstrap-4-second-edition][Learning Boostrap 4]]
** [[https://leanpub.com/enduringcss][Enduring CSS]]

* Lower priority/do when time
** File structures/B+ trees http://cseweb.ucsd.edu/classes/wi02/cse102/syllabus.html
** TODO move weight loss spreadsheet over to org mode, get plotting set up [[http://orgmode.org/manual/Org_002dPlot.html#Org_002dPlot][Org-Plot in Org Mode manual]] :health:
** /From Mathematics to Generic Programming/
** TODO reinstall IdeaVim and try =set :relativenumber= to get relative line numbers going

* Misc/someday bucket
** /Fluent Python/
** SICP
** TAOCP 
** Vim extensions
*** http://jeffkreeftmeijer.com/2013/vims-new-hybrid-line-number-mode/
*** http://www.vim.org/scripts/script.php?script_id=1658
*** https://github.com/takac/vim-hardtime
*** https://github.com/wikitopian/hardmode
*** https://github.com/kien/ctrlp.vim
*** https://github.com/tpope/vim-surround
*** https://github.com/tpope/vim-sensible
*** https://github.com/tpope/vim-fugitive 
*** http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
*** https://github.com/craigemery/vim-autotag
*** http://cscope.sourceforge.net/
*** http://beyondgrep.com/
*** https://github.com/Valloric/YouCompleteMe
*** https://github.com/vim-syntastic/syntastic

** Learn how to actually do A/B testing and data-driven product development like a fucking adult
*** [[http://mcfunley.com/data-driven-products-now]]
* Interesting talks watched
** [[https://www.youtube.com/watch?v%3Dgas2v1emubU][Load Balancing is Impossible]] : counter-intuitive results about bad performance of random load balancing
** [[https://www.youtube.com/watch?v%3DZzYyl5vAWcA][Diving into the Details with DTrace]] : awesome example of debugging randomly slow tests with DTrace
** [[https://www.youtube.com/watch?v%3D9uRho69xSAI][Continuing Education at Work]] : exciting idea about how to start a book club at work
* UX/Usability
** [[https://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515][Don't Make Me Think]]
** [[https://www.amazon.com/UX-Strategy-Innovative-Digital-Products/dp/1449372864][UX Strategy: How To Design Innovative Digital Products that People Want]]
** [[https://www.amazon.com/Joy-Experience-Interactive-Developers-Usability/dp/013427671X][The Joy of UX: User Experience and Interactive Design for Developers]]
** [[https://www.amazon.com/Designing-UX-Forms-Create-Aspects/dp/0994347057/][Designing UX: Forms]]
** [[https://www.amazon.com/Emotional-Design-Love-Everyday-Things/dp/0465051367][Emotional Design: Why We Love or Hate Everyday Things]]
** [[https://www.amazon.com/Non-Designers-Design-Book-4th/dp/0133966151][The Non-Designer's Design Book]]
** [[https://www.amazon.com/Information-Architecture-Beyond-Louis-Rosenfeld/dp/1491911689][Information Architecture: For the Web and Beyond]]
** [[https://www.amazon.com/Jump-Start-Sketch-Master-Designers/dp/0994346964][Jump Start Sketch]]
* Graphic design
** [[https://www.amazon.com/Graphic-Design-Basics-Revised-Expanded/dp/161689332X][Graphic Design: The New Basics]]
** [[https://www.amazon.com/Graphic-Design-Thinking-Briefs/dp/1568989792][Graphic Design Thinking]]
** [[https://www.amazon.com/Graphic-Design-Process-Problem-Solution/dp/1856698262][Graphic Design Process: From Problem to Solution, 20 Case Studies]]
** [[https://www.amazon.com/Color-Design-Workbook-World-Graphic/dp/1592534333][Color Design Workbook]]
** [[https://www.amazon.com/Design-Elements-Color-Fundamentals-Understanding/dp/1592537197][Design Elements: Color Fundamentals]]
** [[https://www.amazon.com/Design-Elements-2nd-Understanding-Expanded/dp/1592539270][Design Elements: Understanding the rules and knowing when to break them]]
** [[https://www.amazon.com/Typography-Workbook-Real-World-Graphic-Design/dp/1592533019][Typography Workbook: A Real-world Guide to Using Type in Graphic Design]]
** [[https://www.amazon.com/Thinking-Type-2nd-revised-expanded/dp/1568989695][Thinking With Type]]
** [[https://www.amazon.com/Design-Elements-Color-Fundamentals-Understanding/dp/1592537197][Design Elements: Color Fundamentals]]
** [[https://www.amazon.com/Learn-Illustrator-Graphic-Design-Illustration/dp/0134397789][Illustrator book]]
** [[https://www.amazon.com/Learn-Adobe-Photoshop-Visual-Communication-Preparation/dp/0134397770][Photoshop book]]
** [[https://www.amazon.com/Vector-Basic-Training-Systematic-Precision/dp/0134176731][Vector Basic Training]]
** [[https://www.amazon.com/Things-Designer-People-Voices-Matter/dp/0321767535][100 Things Every Designer Needs to Know About People]]
