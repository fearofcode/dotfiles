#+TITLE: Random notes from learning C

** Difference in behavior between macros and functions
Macros will just blindly substitute param values.

Functions will evaluate them as a single value.

So passing =++x= to a macro can give undesired results if this is not kept in mind:

#+BEGIN_SRC C
#define SQR(X) ((X) * (X)) /* we are smart and efficient programmers! no function call! */
int k = 42;
printf("%d\n", SQRT(++k)); /* actually requires a Clang pragma if building with -Werror; triggers -Wunsequenced */
#+END_SRC

The above snippet prints =1892= (== 43 * 44), not =1764= (== 42 * 42) as may have been hoped.
** How to step into libc source code
- Install libc source: =sudo apt-get install glibc-source=
- Install libc debug symbols: =sudo apt-get install libc6-dbg=
- Unzip libc source directory: =cd /usr/src/glibc; sudo tar xf glibc-2.23.tar.sz=
- When debugging, add directory to source path: =dir /usr/src/glibc/glibc-2.23=

I think?

https://sourceware.org/gdb/download/onlinedocs/gdb/Source-Path.html#Source-Path is the relevant docs on the last command

** How to ignore individual warnings in Clang
#+BEGIN_SRC C
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wdouble-promotion"
    /* this would normally produce an error with -Weverything, -Werror */
    printf("FLT_EPSILON = %e\n", FLT_EPSILON);
    #pragma clang diagnostic pop
#+END_SRC

*** [[https://www.bignerdranch.com/blog/a-bit-on-warnings/][A Bit On Warnings]]
** =%a= to print floats in hex notation (C99/C11)
** C99's policy on modular arithmetic with negative values is: a % b < 0 iff a < 0; a % b == a - (a/b)*b
*** 11 / -5 == -2, 11 % - 2 == 1
*** a % b == a - (a/b)*b
*** -11 % 5 = -11 - (-11/5)*5 = -11 - (-2)*5 = -11 - (-10) = -1
** =break= statements in =switch=
   It's pretty easy to remember to add a =break= statement after each
   =case= statement, but it can be slightly confusing to realize
   why. Why not just test each expression of each =case= statement?
   Well, if a =case= expression matches and there's no =break=, every
   =case= statement after that gets executed, matching or not.

   So the =break= keeps non-matching =case= statements (which don't
   get evaluated) from exdecuting.
** Pointer addition in C takes into account the data type
So if =data= is an array of type =int=, =data + i= (where =i= is also
an integer) will be a multiple of =sizeof(int)=.

Likewise if =data= were an array of doubles, =data + i= would be be
different, so that incrementing or decrementing =i= will iterate along
the proper byte boundaries of the array.

=data + i= should always equal =&data[i]=.

** Passing an array to a function that takes an array/pointer parameter does not copy the array. It copies the address that the array name points to.
How would it copy the entire array and pass the entire array by value?
How would the compiler know how long the array is? It wouldn't work.

Apparently C++ allows =std::vector= 's to be passed in by reference or
value somehow, which is what one could get confused with (I was).

** C array literal syntax
#+BEGIN_SRC C
    int *literal = (int []) { 5, 8, 6, 12};
#+END_SRC

** Explanation about how it's possible to write =*c = toupper(*c)=: http://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c
** C pointer shit: what the fuck is =* (char * const *)= pointer shit in https://gist.github.com/fearofcode/e79e4308a61300a6649a9af1da21dc3a ?
#+BEGIN_SRC C
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>

    #define LEN 3

    static int qsort_strcmp(const void *p1, const void *p2) {
	/* TODO WHAT THE FUCK IS THIS POINTER SHIT WHAT THE FUCK JESUS CHRIST */
	return strcmp(* (char * const *) p1, * (char * const *) p2);
    }

    int main() {
	const char* strings[] = {
	    "here is a string",
	    "and here is another",
	    "i (lowercase) would like these sorted, please."
	};

	for(int i = 0; i < LEN; i++) {
	    printf("%s\n", strings[i]);
	}

	qsort(strings, LEN, sizeof(char *), qsort_strcmp);

	printf("Sorted, the strings are:\n");

	for(int i = 0; i < LEN; i++) {
	    printf("%s\n", strings[i]);
	}
	return 0;
    }
#+END_SRC

The man page for =qsort(3)= has this incredibly unenlightening comment:

#+BEGIN_SRC C
              /* The actual arguments to this function are "pointers to
              pointers to char", but strcmp(3) arguments are "pointers
              to char", hence the following cast plus dereference */
#+END_SRC

Uh. OK?
